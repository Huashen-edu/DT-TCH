package com.digital.tch.common.converter;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.util.FileCopyUtils;

public class FileHttpMessageConverter implements HttpMessageConverter<File> {

private final Log logger = LogFactory.getLog(getClass());
	
	private List<MediaType> supportedMediaTypes = new ArrayList<MediaType>();

	public FileHttpMessageConverter(){
		this.supportedMediaTypes.add(MediaType.APPLICATION_OCTET_STREAM);
	}
	
	public boolean canRead(Class<?> clazz, MediaType mediaType) {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean canWrite(Class<?> clazz, MediaType mediaType) {
		// TODO Auto-generated method stub
		
		return File.class.equals(clazz);
	}

	public List<MediaType> getSupportedMediaTypes() {
		// TODO Auto-generated method stub
		return supportedMediaTypes;
	}

	public File read(Class<? extends File> clazz, HttpInputMessage inputMessage)
			throws IOException, HttpMessageNotReadableException {
		// TODO Auto-generated method stub
		return null;
	}

	public void write(File t, MediaType contentType, HttpOutputMessage outputMessage) throws IOException,
			HttpMessageNotWritableException {
		// TODO Auto-generated method stub
		
		if (contentType == null) {
			contentType = MediaType.APPLICATION_OCTET_STREAM;
		}
		
		HttpHeaders headers = outputMessage.getHeaders();
		headers.setContentType(contentType);
		headers.set("Content-Length", Long.toString(t.length()));
		headers.set("Content-Transfer-Encoding", "binary");
		
		FileInputStream fis = new FileInputStream(t);
		
		FileCopyUtils.copy(fis, outputMessage.getBody());
		fis.close();
	}

}
