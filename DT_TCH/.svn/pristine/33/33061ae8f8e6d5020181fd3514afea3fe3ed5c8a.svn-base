'ues strict'
//importScripts("script2.js");
moms.polling = moms.polling || {};
(function(polling){

	var timeout = null;
	var default_run = JSON.stringify({type : "RUN"});
	var pollingOption = {
		url : "http://localhost/test.php/",
		delay : 1500,
		params : {}
	};
	//Worker생성
	var worker;
	if(!Worker){
		alert('지원하지 않습니다.');
		return;
	}else{
		worker = new Worker("js/common/polling.js");
	};
	
	//Worker onmessage Event
	worker.onmessage = function(e){
		//console.info("요청결과 데이터", e.data);
		console.info("[ polling.onmessage ]", arguments);
		var result = JSON.parse(e.data) || {};
		polling.bind(result);
		runPolling();
	};
	
	polling.start = function(){
		clearTimeout(timeout);
		runPolling();
	};

	var runPolling = function(){
		clearTimeout(timeout);//예외처리로 한번 더 멈추고 다시 실행
		timeout = setTimeout(function(){
			worker.postMessage(default_run);
		}, pollingOption.delay );
	};


	//Polling을 멈춘다.,
	//Params [true] = 이벤트 등록 된 함수를 비워준다.
	polling.stop = function(isNotDeleteFunction){
		console.error('폴링멈춘다.');
		if(!isNotDeleteFunction){
			polling.bind = function(){
				console.log('empty function') 
				clearTimeout(timeout);
			};
		}
		clearTimeout(timeout);
	};
	
	//콜백 함수 bind
	//moms.polling.bind 함수를 오버라이딩해서 사용.
	polling.bind = function(response){
		console.log("???")
	};
	

	//워커 옵션을 설정한다.
	/*
	{
		url : [string]			요청주소
		delay : [int]			요청 간격
		params : [object]		파라미타
	}
	*/
	polling.setOption = function(option){
		console.debug("[ 폴링 옵션 세팅 ] " , option)
		var params = { type : "setoption" , data : option };
		var sendData = JSON.stringify(params);
		worker.postMessage(sendData);
	};
})(moms.polling);




/*
a = new PollingObject();
a.setOption({params : { notice : true , alaram : true, preparation : false}});
a.start();
*/
/*
function PollingObject(){
	var base = this;
	var mode = 'run';
	var runStr = { type: mode };
	base.option = {
		delay : 1500,
	};
	//Worker생성
	var worker = new Worker("js/polling.js");
	
	
	//Worker onmessage Event
	worker.onmessage = workerOnmessage;
	
	function workerOnmessage(e){
		//console.info("[ polling.onmessage ]", arguments);
		var result = JSON.parse(e.data) || {};
		base.bind(result);
		runPolling();
	};

	//워커 옵션을 설정한다.
	//{
	//	url : [string]			요청주소
	//	delay : [int]			요청 간격
	//	params : [object]	파라미타
	//}
	
	base.setOption = function(option){
		base.option = option;
		var params = { type : "setoption" , data : base.option };
		var sendData = JSON.stringify(params);
		worker.postMessage(sendData);
	};
	
	var runPolling = function(){
		worker.postMessage( JSON.stringify(runStr) );
	};


	base.start = function(opt){
		//if(worker) worker.terminate();
		mode = 'run';
		runPolling();	
	};
	
	//Polling을 멈춘다.,
	//Params [true] = 이벤트 등록 된 함수를 비워준다.
	base.stop = function(isDeleteFunction){
		if(isDeleteFunction) base.bind = function(){ console.log('empty function') };
		//worker.terminate();
		//worker = new Worker("js/polling.js");
		//worker.onmessage = workerOnmessage;
		//worker.postMessage( JSON.stringify({type : "stop"}) );
		//console.log("worker",worker)
		mode = 'stop';
	};

	//콜백 함수 bind
	//cts.luncher.polling.bind 함수를 오버라이딩해서 사용.
	base.bind = function(response){
		console.log("[	polling.bind	]", response);
		console.log("[	polling.bind	]", JSON.parse( response) );
	};
};
*/