

/******
 * 유틸성 함수 모음..
 ****/
/**
 * [requsetAjax description]
 * @param  {[type]}   url      [description]
 * @param  {[type]}   params   [description]
 * @param  {[type]}   Mathod   [description]
 * @param  {Function} callback [description]
 * @return {[type]}            [description]
 */
function requestAjax( url, params, Method){
	var loading = $("cts-loading");
	loading.stop().fadeIn(50);
	var deferred = $.Deferred();
	$.ajax({
		type: Method,
		url: url,
		dataType: "json",
		cache: false,
		async: true,
		data: params,
		success: function(jsonData){
			if(jsonData.resultcode && jsonData.resultcode === "0000" ){
				deferred.resolve(jsonData.result);
			}else{
				deferred.reject("resultcode error");	
			}
		},
		error:function (xhr, ajaxOptions, thrownError){
			 deferred.reject("error");
		},
		complete: function() {
			loading.stop().fadeOut(300);
		}
	});
	return deferred;
};

function sortData(data, orderKey, orderMethod){
	var result = data.sort(function(a,b){
		// if(orderKey == "up"){
		// 	return ( a[orderKey] > b[orderKey] ) ? true : false;
		// }else{	
		// 	return ( b[orderKey] < a[orderKey] ) ? true : false;
		// }
		if(a[orderKey] == b[orderKey]){
			return 0;
		}else if(a[orderKey] > b[orderKey]){
			return (orderMethod == "up") ? 1 : -1;
		}else{
			return (orderMethod == "up") ? -1 : 1;
		}
	});
	return result;
}


/**
 * [arrayObjectFindItem description]
 * array object에서 특정 key에 매칭되면 값을 찾아 반혼한다.
 * @return {[type]} [description]
 */
function arrayObjectFindItem(array, key, value){
	var result = array.filter(function(item, idx){
		return item[key] === value;
	});
	//console.log("arrayObjectFindItem" , arguments, result);
	return result || [];
};



/**
 * [setChartColor description]
 */
function setChartColor(idx){
	return Highcharts.setOptions().colors[ idx % Highcharts.setOptions().colors.length];
}