package com.digital.tch.common.util;



import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class HtmlToImage
{
	static final String progId = "ACAWebThumb.ThumbMaker";
	private final Log logger = LogFactory.getLog(this.getClass());
	//CComObject t_xCom = new CComObject();
	private static HtmlToImage instance;
	private HtmlToImage(){ 
		
		
	} 
	public static HtmlToImage getInstance(){ 
	if (instance == null) 
	instance = new HtmlToImage();  
	return instance; 
	} 
	
	public void thumnailGenerator(String html, long slideId,int slideOrder, long lessonPlanId, HttpServletRequest req) throws Exception {
		// String exePath = VivasamProperties.getProperty("screenShotPath");
		String path = req.getServletContext().getRealPath("/images/lesson_plan/");
		String host = "http://" + req.getServerName() + ":" + req.getServerPort() + req.getContextPath();
		String exePath = req.getSession().getServletContext().getRealPath("") + "\\exe";
		String htmlFileName = String.valueOf(slideId) + ".html";
		String imgFileName = String.valueOf(slideId) + ".png";
		path = path + "/" + String.valueOf(lessonPlanId);
		if (!new File(path).exists())
			new File(path).mkdirs();
		Writer output = null;
		try {
			File f = new File(path + "/" + htmlFileName);
			f.createNewFile();
			html = html.replaceAll("border: 1px","border: 0px");
			html = "<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>" + "<link rel='stylesheet' type='text/css' href='" + host + "/editor/css/Font_style.css'>" + html;
			
			output = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"));
			output.write(html);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				output.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		String originalImg = path + "/" + imgFileName;
		
		Runtime rt = Runtime.getRuntime();
		try {
			String argu = "/CutyCapt.exe --url=" + host + "/images/lesson_plan/" + String.valueOf(lessonPlanId) + "/" + htmlFileName + " --out="
					+ originalImg;
			Process p = rt.exec(exePath + argu);
			p.waitFor();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String resizeFile = path + "/thum_" + imgFileName;
			
		BufferedImage sourceImage = ImageIO.read(new File(originalImg));
		Image thumbnail = sourceImage.getScaledInstance(186, -1, Image.SCALE_SMOOTH);
		BufferedImage bufferedThumbnail = new BufferedImage(thumbnail.getWidth(null),
		                                                      thumbnail.getHeight(null),
		                                                      BufferedImage.TYPE_INT_RGB);
		bufferedThumbnail.getGraphics().drawImage(thumbnail, 0, 0, null);
		  
		ImageIO.write(bufferedThumbnail, "png", new File(resizeFile));
		
		


		
	}
	
	public void thumnailGenerator3(String html, long slideId,int slideOrder, long lessonPlanId, HttpServletRequest req) throws Exception {
		// String exePath = VivasamProperties.getProperty("screenShotPath");
		String path = req.getServletContext().getRealPath("/images/lesson_plan/");
		String host = "http://" + req.getServerName() + ":" + req.getServerPort() + req.getContextPath();
		String exePath = req.getSession().getServletContext().getRealPath("") + "\\exe";
		String htmlFileName = String.valueOf(slideId) + ".html";
		String imgFileName = String.valueOf(slideId) + ".png";
		path = path + "/" + String.valueOf(lessonPlanId);
		
		if (!new File(path).exists())
			new File(path).mkdirs();
		Writer output = null;
		try {
			File f = new File(path + "/" + htmlFileName);
			
			f.createNewFile();
			html = html.replaceAll("border: 1px","border: 0px");
			String appendHtml = "<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>" + "<link rel='stylesheet' type='text/css' href='" + host + "/css/Font_style.css'>" ;
			//appendHtml += themeCssLink;
			appendHtml +="<body style='position: absolute; width:829px; height:649px; -webkit-transform-origin-x: 0%;'>";
			/*
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/css/Authoring_editor.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/css/theme_base.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/css/base.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/ms/chi/ms_chi.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/ms/eng/ms_eng.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/ms/eth/ms_eth.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/ms/geo/ms_geo.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/ms/his/ms_his.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/ms/kor/ms_kor.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/ms/lit/ms_lit.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/ms/mat/ms_mat.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/ms/sci/ms_sci.css'>";
			appendHtml += "<link rel='stylesheet' type='text/css' href='" + host + "/images/theme/ms/soc/ms_soc.css'>";
			appendHtml += "<div class='main_content ms_sci ui-droppable' id='main_slide' style='-webkit-user-select: none; '>";
			*/
			html = appendHtml + html +"</body>";
			
			output = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"));
			output.write(html);
			
			
			
			
		} catch (Exception e) {
			logger.error(e.getMessage());
			e.printStackTrace();
		} finally {
			try {
				output.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		/*if ( slideOrder == 1 ){
			String originalImg = path + "/" + imgFileName;
			
			Runtime rt = Runtime.getRuntime();
			try {
				String argu = "/CutyCapt.exe --url=" + host + "/images/lesson_plan/" + String.valueOf(lessonPlanId) + "/" + htmlFileName + " --out="
						+ originalImg;
				Process p = rt.exec(exePath + argu);
				p.waitFor();

			
			
				String resizeFile = path + "/thum_" + imgFileName;
				
				BufferedImage sourceImage = ImageIO.read(new File(originalImg));
				Image thumbnail = sourceImage.getScaledInstance(186, -1, Image.SCALE_SMOOTH);
				BufferedImage bufferedThumbnail = new BufferedImage(thumbnail.getWidth(null),
				                                                      thumbnail.getHeight(null),
				                                                      BufferedImage.TYPE_INT_RGB);
				bufferedThumbnail.getGraphics().drawImage(thumbnail, 0, 0, null);
				  
				ImageIO.write(bufferedThumbnail, "png", new File(resizeFile));
			} catch (Exception e) {
				logger.error(e.getMessage());
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}*/

		
	}
}

